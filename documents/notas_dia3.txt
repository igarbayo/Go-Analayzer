- para entregar, tiene que compilar con un makefile en linux (sin cosas de clion).
- de cara a la evaluación por pares, no tiene que aparecer nombre o dato personal
  en ninguno de los ficheros.
- tampoco se pone el nombre en la carpeta que se entrega.
- se comprime en ZIP y listo.
- se añadirá al proyecto un readme.txt para decir cómo compilar y ejecutar el
  proyecto.
- el código deberá estar bien documentada, para ayudar a entender las decisiones
  que se toman.
- hay que entregar y aprobar todas las prácticas, y a poder ser con una evaluación
  positiva.
- el sistema de entrada proporciona un acceso transparente a los caracteres del
  código fuente. lo importante es que accede a una fuente de datos y va devolviendo
  los carácteres.
       sig_caracter() en sistema de entrada
       ----> proporciona todo lo necesario para ejecutar el siguiente autómata.

- es obligatorio implementar mediante un doble puntero el sistema de entrada.
- el doble puntero facilita la programación del compilador para computadoras con
  bajos recursos.
- se puede utilizar un doble centinela.
- la mayor parte de las decisiones sobre el sistema de entrada se tomarán en función
  de la eficiencia computacional (primero, tiempo de cómputo; segundo, memoria dis-
  ponible, que en este caso es un bien escaso).
- asi, se gestionan de forma transparente tamaños arbitrarios de la fuente de datos.
- esto es una ventaja muy importante de este tipo de estructura de datos.
- el sistema de "dos listas" se puede implementar con dos arrays/lista enlazada (igual
  es mejor para no añadir lógica para ir de un array a otro). se puede tener cada
  elemento enlazado con el siguiente. pero hay un argumento que puede pesar más.
  el tamaño de los bloques no va a variar durante la compilación, así que no será
  una estructura de datos dinámica -> mejor un array físico que está separado mediante
  2 arrays lógicos.
- es más eficiente un array que una lista por el motivo anterior. entre 1 array junto
  o 2 separados (struct o demás), se puede gestionar como se desee.
- el sistema de entrada tiene arrays lógicos A y B.
- inicializar sistema entrada significa leer y guardar el código en los arrays. ir
  carácter a carácter del fichero e insertando en el array. vamos cargando bloques de
  7 en 7 (cada A y B tiene campos de longitud 7).
- con las funciones de ANSI C se debe primero consultar la documentación.
- se lee mediante un while con fgetc (se cargan los 7). otra forma es usar fread.
- con fgetc se necesita un bucle, con fread solo se hace una llamada, que es mejor.
- es más eficiente fread.
- después de esta opción, sería recomendable dejar el puntero en la posición siguiente
  al último carácter leído.
- ejemplo de documentación: funciones de string de C que generan copias de strings y que
  generan basura indetectable al mirar la memoria reservada o liberada.
- se pueden cargar bloque A, bloque B y luego empezar. pero si no lo cargamos al inicio,
  es mejor, pues así ya el algoritmo funciona desde el principio.
- Algoritmo general:
     cargar bloque A -> final bloque A -> cargar bloque B ->  final bloque B ->
                        cargar bloque A -> ...

- el centinela funciona con un puntero inicio y un puntero delantero, inicialmente en la
  primera posición del primer bloque. cuando delantero está en FIN_FICHERO, cargamos el
  bloque B. los punteros se van moviendo hacia la derecha (según diapositivas).
- el analizador léxico en el autómata de cadenas alfanuméricas llega a un estado final de
  aceptación cuando lee el espacio en blanco.
- hay una limitación del tipo de tamaño máximo de lexema al usar el doble centinela. el
  tamaño máximo del lexema no puede ser mayor que (n-1 = 8), siendo n el tamaño del
  bloque.
- en nuestra práctica vamos a elegir una dimensión pequeña de tamaño de bloque, para así
  ver los problemas que nos podemos encontrar. Primero, se puede empezar a hacer muy grande,
  de forma que quepa todo el ćodigo fuente, y luego cada vez más pequeño, recorriendo los
  posibles errores.
- al terminar de reconocer lexemas, hay que devolver caracter. esto significa hacer ope-
  raciones con los punteros inicio y delantero para devolver el caracter.
- funciones: inicializar, leer bloque, siguiente caracter, devolver caracter, etc.
- si las devoluciones son de un caracter en un bloque distinto al lexema, la funcion
  devolver no puede caer en un fin de fichero, pues si no se volveria a cargar un
  y se perdería la información del bloque previamente cargado. las devoluciones no
  traer el puntero delantero a un fin de fichero.
- para evitarlo hay muchas maneras, y hay que evitarlo.
- en los cambios de bloque (con condiciones de contorno, los bordes) es como se produ-
  cen los errores.
- los bloques tienen la pinta:
        A                                           B
        -------------------------------------       -------------------------------------
        |    |     | ... |    | FIN FICHERO |       |    |     | ... |    | FIN FICHERO |
        -------------------------------------       -------------------------------------

- de cada lexema, en un momento dado, puede haber 2 copias en la ejecución. Las copias
  estarán en:
    1. sistema de entrada
    2. tabla de símbolos
    3. copia del lexema (contenedor)

- para preguntar a la TS si una cadena está en la TS, se le pregunta por la copia del
  lexema. hace falta la copia del lexema, pues la copia del sistema de entrada no
  tiene el \0 para delimitar los string, el puntero inicio es una secuencia de caracteres,
  no un string. esta variable, c->lexema, se construye con lo aue hay entre inicio y
  delantero (excluyendo el último), y un \0; de la forma: (copiar_lexema del sistema de
  entrada)
    1. se resta delantero - inicio
    2. se hace un malloc de esa longitud
    3. se recorren los caracteres en las condiciones distintas de separación de los bloques
       y se comparte ese puntero a char para luego invocar a la función buscar.

- se puede tener un tercer bloque (char* con el tamaño del bloque), pero no se debe usar,
  pues tenemos recursos limitados.

- lo anterior no se hace ya en el analizador léxico (esto tengo que cambiarlo en mi
  código). el analizador léxico no construye el lexema, lo hace el sistema de entrada.
  un AFD no tiene que tener memoria: todo está en el estado. además, tampoco se hace
  en el analizador léxico porqiue hacer un realloc al leer cada carácter nuevo es una
  operación MUY costosa.

- cuando un lexema el tamaño máximo, que es el tamaño de bloque - 1. al devolver error,
  no se puede abortar y se tiene que seguir analizando, pues el lexema puede ser correcto.
  no genera error léxico, no tiene por qué generar error léxico o semántico. es un error
  (no se puede generar código objeto), pero es solo un error a nivel de sistema de
  entrada.
- para saber que hay un error de este tipo en los bloques, la condición de que el
  lexema quepa en el tamaño de bloque es que yo pretenda recargar delantero donde está
  inicio, es decir: si esto pasa => lexema demasiado grande. el momento en la lectura
  en donde el compilador diga que el lexema es demasiado grande dependerá de cómo
  coincida con los bloques en el sistema de entrada.
- para que el analizador siga con un error de tamaño de lexema excedido, se puede
  truncar el lexema, quedándonos con los n últimos o primeros caracteres. si leo
  los primeros, debería volver a analizarlos con el automata. así, es más fácil
  tomar los últimos, para no tener que volver a pasar por el autómata. hay que
  hacerse preguntas y plantear la propia solución. el objetivo único es hacer que
  se reconozca que hay un error de entrada de tamaño excedido y luego hacer que el
  compilador no casque.
- el fichero de error debe contener una función que imprime un error de forma mínima-
  mente parametrizada, y mínimo gestionar 2 o 3 errores.
- 0b0x3 puede no devolver error por no estar en concurrentSum, pero no es lo ideal
  para un caso más general.

- la máxima es hacer fácil lo difícil; y no al revés.
- los comentarios no deberían producir ningún error sin ser demasiado largos -> ya
  sabemos que podemos no generar un componente léxico con los comentarios.

- a la hora de imprimir por pantalla, para los operadores, si cogemos el ASCII con %c,
  se puede utilizar ya el ASCII para que se imprima directamente el carácter por
  pantalla (por ejemplo, mejor imprimir + que imprimir SUMA)
- la segunda regla en Go de los ; no se tiene por qué gestionar, porque no aparece
  en nuestro código. Pero sí se tiene que gestionar la primera de las reglas.

- el tamaño de bloque se incluye como una constante para poder ir variándola al
  hacer pruebas.